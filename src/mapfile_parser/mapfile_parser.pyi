#!/usr/bin/env python3

# SPDX-FileCopyrightText: Â© 2023 Decompollaborate
# SPDX-License-Identifier: MIT

from __future__ import annotations

from pathlib import Path
from typing import Any, Generator


class FoundSymbolInfo:
    file: File
    symbol: Symbol
    offset: int

    def __init__(self, file: File, symbol: Symbol, offset: int=0): ...

    def getAsStr(self) -> str: ...
    def getAsStrPlusOffset(self, symName: str|None=None) -> str: ...


class SymbolComparisonInfo:
    symbol: Symbol
    buildAddress: int
    buildFile: File|None
    expectedAddress: int
    expectedFile: File|None
    diff: int|None

    def __init__(self, symbol: Symbol, buildAddress: int, buildFile: File|None, expectedAddress: int, expectedFile: File|None, diff: int|None): ...

class MapsComparisonInfo:
    badFiles: set[File] = set()
    missingFiles: set[File] = set()
    comparedList: list[SymbolComparisonInfo] = []

    def __init__(self): ...


class Symbol:
    name: str
    vram: int
    size: int|None # in bytes
    vrom: int|None

    def __init__(self, name: str, vram: int, size: int|None=None, vrom: int|None=None): ...

    def getVramStr(self) -> str: ...
    def getSizeStr(self) -> str: ...
    def getVromStr(self) -> str: ...

    def serializeVram(self, humanReadable: bool=True) -> str|int|None: ...
    def serializeSize(self, humanReadable: bool=True) -> str|int|None: ...
    def serializeVrom(self, humanReadable: bool=True) -> str|int|None: ...

    @staticmethod
    def toCsvHeader() -> str: ...
    def toCsv(self) -> str: ...

    @staticmethod
    def printCsvHeader(): ...
    def printAsCsv(self): ...

    def toJson(self, humanReadable: bool=True) -> dict[str, Any]: ...

    def __eq__(self, other: Symbol) -> bool: ...
    def __hash__(self): ...


class File:
    filepath: Path
    vram: int
    size: int # in bytes
    sectionType: str
    vrom: int|None
    # _symbols: list[Symbol]

    def __init__(self, filepath: Path, vram: int, size: int, section_type: str, vrom: int|None=None) -> None: ...

    @property
    def isNoloadSection(self) -> bool: ...

    def serializeVram(self, humanReadable: bool=True) -> str|int|None: ...
    def serializeSize(self, humanReadable: bool=True) -> str|int|None: ...
    def serializeVrom(self, humanReadable: bool=True) -> str|int|None: ...

    #! @deprecated
    def getName(self) -> Path: ...

    def findSymbolByName(self, symName: str) -> Symbol|None: ...
    def findSymbolByVramOrVrom(self, address: int) -> tuple[Symbol, int]|None: ...

    @staticmethod
    def toCsvHeader(printVram: bool=True) -> str: ...
    def toCsv(self, printVram: bool=True) -> str: ...

    @staticmethod
    def printCsvHeader(printVram: bool=True): ...
    def printAsCsv(self, printVram: bool=True): ...

    def toJson(self, humanReadable: bool=True) -> dict[str, Any]: ...

    def copySymbolList(self) -> list[Symbol]:
        """Returns a copy (not a reference) of the internal symbol list"""

    def setSymbolList(self, newList: list[Symbol]) -> None:
        """Replaces the internal symbol list with a copy of `newList`"""

    def appendSymbol(self, sym: Symbol) -> None:
        """Appends a copy of `sym` into the internal symbol list"""

    def __iter__(self) -> Generator[Symbol, None, None]: ...

    def __getitem__(self, index) -> Symbol: ...
    def __setitem__(self, index, sym: Symbol): ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self): ...


class Segment:
    name: str
    vram: int
    size: int
    vrom: int
    # _filesList: list[File] = dataclasses.field(default_factory=list)

    def __init__(self, name: str, vram: int, size: int, vrom: int): ...

    ## def serializeVram(self, humanReadable: bool=True) -> str|int|None: ...
    ## def serializeSize(self, humanReadable: bool=True) -> str|int|None: ...
    ## def serializeVrom(self, humanReadable: bool=True) -> str|int|None: ...

    def filterBySectionType(self, sectionType: str) -> Segment: ...
    def getEveryFileExceptSectionType(self, sectionType: str) -> Segment: ...

    def findSymbolByName(self, symName: str) -> FoundSymbolInfo|None: ...
    def findSymbolByVramOrVrom(self, address: int) -> FoundSymbolInfo|None: ...

    def mixFolders(self) -> Segment: ...

    def printAsCsv(self, printVram: bool=True, skipWithoutSymbols: bool=True): ...
    def printSymbolsCsv(self): ...

    def toCsv(self, printVram: bool=True, skipWithoutSymbols: bool=True) -> str: ...
    def toCsvSymbols(self) -> str: ...

    # def toJson(self, humanReadable: bool=True) -> dict[str, Any]: ...

    def __iter__(self) -> Generator[File, None, None]: ...
    def __getitem__(self, index) -> File: ...
    def __setitem__(self, index, file: File): ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self): ...


class MapFile:
    def __init__(self) -> None: ...

    def readMapFile(self, mapPath: Path) -> None: ...

    def findSymbolByName(self, symName: str) -> FoundSymbolInfo|None: ...
